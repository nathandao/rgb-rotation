["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$p5",["^ ","~$prototype",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.util","~:imports",null,"~:requires",["^ ","~$cstr","~$clojure.string","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$clj-compilation?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","~:line",76,"~:column",7,"~:end-line",76,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^K",[[]]]]]],"^9","~$quil.util/clj-compilation?","^E","resources/public/js/development/quil/util.cljc","^I",23,"~:method-params",["^K",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"~:variadic?",false,"^F",76,"~:ret-tag","~$boolean","^H",76,"~:max-fixed-arity",0,"~:fn-var",true,"^J",["^K",["^L",["^K",[[]]]]]],"~$make-quil-constant-map",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",102,"^G",7,"^H",102,"^I",29,"^J",["^K",["^L",["^K",[["~$target","~$const-map-name","~$const-map"]]]]]],"^9","~$quil.util/make-quil-constant-map","^E","resources/public/js/development/quil/util.cljc","^I",29,"^N",["^K",[["^W","^X","^Y"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",102,"^R",["^8",["~$seq","~$cljs.core/IList"]],"^H",102,"^T",3,"^U",true,"^J",["^K",["^L",["^K",[["^W","^X","^Y"]]]]]],"~$clj-unchecked-int",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",115,"^G",7,"^H",115,"^I",24,"^J",["^K",["^L",["^K",[["~$v"]]]]],"~:doc","In clojure it does unchecked-int and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"^9","~$quil.util/clj-unchecked-int","^E","resources/public/js/development/quil/util.cljc","^I",24,"^N",["^K",[["~$v"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",115,"^H",115,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$v"]]]]],"^12","In clojure it does unchecked-int and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"~$initial-internal-state",["^ ","^9","~$quil.util/initial-internal-state","^E","resources/public/js/development/quil/util.cljc","^F",9,"^G",1,"^H",9,"^I",28,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",9,"^G",6,"^H",9,"^I",28],"^12","Internal state map used to initiate all sketches.","~:tag","~$cljs.core/IMap"],"~$print-definition-list",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",65,"^G",7,"^H",65,"^I",28,"^J",["^K",["^L",["^K",[["~$definitions"]]]]]],"^9","~$quil.util/print-definition-list","^E","resources/public/js/development/quil/util.cljc","^I",28,"^N",["^K",[["^19"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",65,"^R","~$clj-nil","^H",65,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^19"]]]]]],"~$generate-quil-constants",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",109,"^G",11,"^H",109,"^I",34,"~:macro",true,"^J",["^K",["^L",["^K",[["^W","~$&","~$opts"]]]]],"~:top-fn",["^ ","^Q",true,"~:fixed-arity",1,"^T",1,"^N",["^K",[["^K",["^W","^1>"]]]],"^J",["^K",[["^W","~$&","^1>"]]],"^P",["^K",[null]]]],"^9","~$quil.util/generate-quil-constants","^E","resources/public/js/development/quil/util.cljc","^I",34,"^1?",["^ ","^Q",true,"^1@",1,"^T",1,"^N",["^K",[["^K",["^W","^1>"]]]],"^J",["^K",[["^W","~$&","^1>"]]],"^P",["^K",[null]]],"^N",["^K",[["^K",["^W","^1>"]]]],"^O",null,"^1@",1,"^P",["^K",[null]],"^G",1,"^Q",true,"~:methods",[["^ ","^1@",1,"^Q",true,"^16",["^8",["^[","^10"]]]],"^F",109,"^1=",true,"^R","~$any","^H",109,"^T",1,"^U",false,"^J",["^K",[["^W","~$&","^1>"]]]],"~$resolve-constant-key",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",32,"^G",7,"^H",32,"^I",27,"^J",["^K",["^L",["^K",[["~$key","~$mappings"]]]]],"^12","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"^9","~$quil.util/resolve-constant-key","^E","resources/public/js/development/quil/util.cljc","^I",27,"^N",["^K",[["^1E","^1F"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",32,"^R",["^8",[null,"^1C","^1;"]],"^H",32,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^1E","^1F"]]]]],"^12","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"~$no-fn",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",5,"^G",7,"^H",5,"^I",12,"^J",["^K",["^L",["^K",[[]]]]],"^12","Function that does nothing."],"^9","~$quil.util/no-fn","^E","resources/public/js/development/quil/util.cljc","^I",12,"^N",["^K",[[]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",5,"^R","^1;","^H",5,"^T",0,"^U",true,"^J",["^K",["^L",["^K",[[]]]]],"^12","Function that does nothing."],"~$prepare-quil-clj-constants",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",90,"^G",7,"^H",90,"^I",33,"^J",["^K",["^L",["^K",[["~$constants"]]]]]],"^9","~$quil.util/prepare-quil-clj-constants","^E","resources/public/js/development/quil/util.cljc","^I",33,"^N",["^K",[["^1K"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",90,"^R",["^8",[null,"~$clj","^1C"]],"^H",90,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1K"]]]]]],"~$prepare-quil-cljs-constants",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",96,"^G",7,"^H",96,"^I",34,"^J",["^K",["^L",["^K",[["^1K"]]]]]],"^9","~$quil.util/prepare-quil-cljs-constants","^E","resources/public/js/development/quil/util.cljc","^I",34,"^N",["^K",[["^1K"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",96,"^R",["^8",[null,"^1M","^1C"]],"^H",96,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1K"]]]]]],"~$length-of-longest-key",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",44,"^G",8,"^H",44,"^I",29,"~:private",true,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^12","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"^1Q",true,"^9","~$quil.util/length-of-longest-key","^E","resources/public/js/development/quil/util.cljc","^I",29,"^N",["^K",[["~$m"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",44,"^R",["^8",["^1C","~$number"]],"^H",44,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^12","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"~$gen-padding",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",53,"^G",8,"^H",53,"^I",19,"^1Q",true,"^J",["^K",["^L",["^K",[["~$len"],["^1U","~$pad"],["~$s","^1U","^1V"]]]]],"^12","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space","^1?",["^ ","^Q",false,"^1@",3,"^T",3,"^N",["^K",[["^1U"],["^1U","^1V"],["~$s","^1U","^1V"]]],"^J",["^K",[["^1U"],["^1U","^1V"],["~$s","^1U","^1V"]]],"^P",["^K",[null,null,null]]]],"^1Q",true,"^9","~$quil.util/gen-padding","^E","resources/public/js/development/quil/util.cljc","^I",19,"^1?",["^ ","^Q",false,"^1@",3,"^T",3,"^N",["^K",[["^1U"],["^1U","^1V"],["~$s","^1U","^1V"]]],"^J",["^K",[["^1U"],["^1U","^1V"],["~$s","^1U","^1V"]]],"^P",["^K",[null,null,null]]],"^N",["^K",[["^1U"],["^1U","^1V"],["~$s","^1U","^1V"]]],"^O",null,"^1@",3,"^P",["^K",[null,null,null]],"^G",1,"^Q",false,"^1B",[["^ ","^1@",1,"^Q",false,"^16","^1C"],["^ ","^1@",2,"^Q",false,"^16","^1C"],["^ ","^1@",3,"^Q",false,"^16",["^8",[null,"^1C"]]]],"^F",53,"^H",53,"^T",3,"^U",true,"^J",["^K",[["^1U"],["^1U","^1V"],["~$s","^1U","^1V"]]],"^12","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"],"~$prepare-quil-name",["^ ","^C",null,"^D",["^ ","^E","/home/ndao/__/rgb-rotation/resources/public/js/development/quil/util.cljc","^F",85,"^G",7,"^H",85,"^I",24,"^J",["^K",["^L",["^K",[["~$const-keyword"]]]]]],"^9","~$quil.util/prepare-quil-name","^E","resources/public/js/development/quil/util.cljc","^I",24,"^N",["^K",[["^1Y"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",85,"^R","^1C","^H",85,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1Y"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:frame-rate","~:else","~$do","~:looping?","~$js/p5.prototype","~:clj","~$cljs.core/aget","~$def"]],"~:order",["^23","^26","^24","^29","^27","^2:","^28","^25"]],"^12","Utility fns"]